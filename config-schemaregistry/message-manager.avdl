@namespace("com.hpe.krakenmare.message.manager")
protocol Protocol {

	record SensorUuids {
		/** Device unique framework identifier */
		@logicalType("uuid")
		string uuid;

		/** Sensors unique framework identifiers */
		map<@logicalType("uuid") string> sensorUuids;
	}

	record DeviceListResponse {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string uuid;

		/** Devices and sensors unique framework identifiers */
		map<com.hpe.krakenmare.message.manager.SensorUuids> deviceUuids;
	}

	record RegisterResponse {
		/** Unique identifier agent (MAC for system internal agents, Certificate for external) */
		string uid;

		/** True == success, False == error */
		boolean status;

		/** Status message */
		string message;

		/** Framework unique identifier for all other communication */
		@logicalType("uuid")
		string uuid;

		/** Topics to be used for sending data */
		map<string> topics;
	}

	record DeregisterResponse {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		/** Success/Failure of deregistration */
		boolean success;
	}

	record CollectionManagement {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		/** Select to enable or disable collection */
		boolean enableCollection;
	}

	record ActivateSensors {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		/** List of sensor UUIDs to activate */
		array<@logicalType("uuid") string> sensorUuids;
	}

	record DeactivateSensors {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		/** Deactivate list of sensors by uuid */
		array<@logicalType("uuid") string> sensorUuids;
	}

	record SensorFrequency {
		/** Sensor unique framework identifier */
		@logicalType("uuid")
		string sensorUuid;

		/** Sensor frequency in HZ */
		float frequency;
	}

	record NewSensorCollectionFreq {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		array<SensorFrequency> frequencies;
	}

	record SensorRequest {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string agentUuid;

		/** Timestamp for starting values */
		@logicalType("timestamp-millis")
		long startTimestamp;

		/** Timestamp for last values */
		@logicalType("timestamp-millis")
		long endTimestamp;

		/** List of sensors UUIDs */
		array<@logicalType("uuid") string> sensorUuids;
	}

}