@namespace("com.hpe.krakenmare.core")
protocol Protocol {

	record Agent {
		/** Incremental id as created by the framework manager */
		long id;

		/** Unique id as created by the Agent */
		string uid;

		/** UUID of the agent */
		@logicalType("uuid")
		string uuid;

		/** Human readable name */
		string name;

		/** List of devices in this agent */
		array<Device> devices;
	}

	record Device {
		/** UUID of the device */
		@logicalType("uuid")
		string uuid;

		/** Unique id as created by the Agent for the Device */
		string id;

		/** Human readable name */
		string name;

		/** Type of device such as node, chassis manager, ... */
		string type;

		/** Location of device in the system */
		string location;

		/** List of sensors in this device */
		array<Sensor> sensors;
	}

	record Sensor {
		/** UUID of the device */
		@logicalType("uuid")
		string uuid;

		/** Unique id as created by the Agent for the Sensor */
		string id;

		/** Human readable name */
		string name;

		/** Collection frequency minimum */
		union { null, float } collectionFrequencyMin;

		/** Collection frequency maximum */
		union { null, float } collectionFrequencyMax;

		/** Collection frequency default */
		union { null, float } collectionFrequencyDefault;

		/** Description of the accuracy of measurement */
		union { null, string } measuringAccuracy;

		/** Unit such as amps, degrees c */
		union { null, string } unit;

		/** Description of the type of sensor such as temperature, pressure */
		union { null, string } type;

		/** Value range for sensor. Minimum */
		union { null, float } valueRangeMin;

		/** Value range for sensor. Maximum */
		union { null, float } valueRangeMax;

		/** How frequently a sensor is expect to change the value */
		union { null, float } changeFrequency;

		/** Current collection frequency is HZ */
		union { null, float } currentCollectionFrequency;

		/** How many weeks to store this sensor's values. null means forever */
		union { null, int } storageTime;
	}

	@namespace("com.hpe.krakenmare.message.agent")
	record DeviceList {
		/** Agent UUID */
		@logicalType("uuid")
		string uuid;

		/** List of devices */
		array<com.hpe.krakenmare.core.Device> devices;
	}

	@namespace("com.hpe.krakenmare.message.manager")
	record DeviceListResponse {
		/** Agent unique framework identifier */
		@logicalType("uuid")
		string uuid;

		/** Devices and sensors unique framework identifiers */
		map<com.hpe.krakenmare.message.manager.SensorUuids> deviceUuids;
	}

	@namespace("com.hpe.krakenmare.message.manager")
	record SensorUuids {
		/** Device unique framework identifier */
		@logicalType("uuid")
		string uuid;

		/** Sensors unique framework identifiers */
		map<@logicalType("uuid") string> sensorUuids;
	}

	@namespace("com.hpe.krakenmare.message.agent")
	record RegisterRequest {
		/** Unique identifier agent (MAC for system internal agents, Certificate for external) */
		string agentID;

		/** Free format names such as Agent (System X), Consumer, JobAgent, UserAgent, KME (Kraken Mare Embedded )Agent, KMN (Kraken Mare Node) Agent */
		string type;

		/** Human readable agent name */
		string name;

		/** Human readable agent description */
		string description;

		/** If true, framework will provide device/sensor list */
		boolean useSensorTemplate;
	}

	@namespace("com.hpe.krakenmare.message.manager")
	record RegisterResponse {
		/** Unique identifier agent (MAC for system internal agents, Certificate for external) */
		string agentID;

		/** True == success, False == error */
		boolean status;

		/** Status message */
		string message;

		/** Framework unique identifier for all other communication */
		@logicalType("uuid")
		string uuid;

		/** Topics to be used for sending data */
		map<string> topics;
	}

}